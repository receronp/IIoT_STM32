
IoT_RaulyAmira.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037f0  080037f0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f0  080037f0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000003c4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4d9  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002561  00000000  00000000  00013515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00015a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  000165e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002125b  00000000  00000000  00016e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d1d  00000000  00000000  000380dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7f04  00000000  00000000  00048dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110cfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d84  00000000  00000000  00110d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00113ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037a0 	.word	0x080037a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080037a0 	.word	0x080037a0

080001d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_CAN_Init+0x68>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_CAN_Init+0x6c>)
 80001dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_CAN_Init+0x68>)
 80001e0:	2209      	movs	r2, #9
 80001e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_CAN_Init+0x68>)
 80001e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001ec:	4b13      	ldr	r3, [pc, #76]	@ (800023c <MX_CAN_Init+0x68>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_CAN_Init+0x68>)
 80001f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80001f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_CAN_Init+0x68>)
 80001fc:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000200:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <MX_CAN_Init+0x68>)
 8000204:	2200      	movs	r2, #0
 8000206:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <MX_CAN_Init+0x68>)
 800020a:	2200      	movs	r2, #0
 800020c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <MX_CAN_Init+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_CAN_Init+0x68>)
 8000216:	2200      	movs	r2, #0
 8000218:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <MX_CAN_Init+0x68>)
 800021c:	2200      	movs	r2, #0
 800021e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <MX_CAN_Init+0x68>)
 8000222:	2200      	movs	r2, #0
 8000224:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_CAN_Init+0x68>)
 8000228:	f000 fc1c 	bl	8000a64 <HAL_CAN_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000232:	f000 f9f1 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028
 8000240:	40006400 	.word	0x40006400

08000244 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <HAL_CAN_MspInit+0x7c>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d128      	bne.n	80002b8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000266:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	4a16      	ldr	r2, [pc, #88]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 800026c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000270:	61d3      	str	r3, [r2, #28]
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800027a:	613b      	str	r3, [r7, #16]
 800027c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800029a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029c:	2302      	movs	r3, #2
 800029e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002a8:	2309      	movs	r3, #9
 80002aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4619      	mov	r1, r3
 80002b2:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <HAL_CAN_MspInit+0x84>)
 80002b4:	f000 fdb8 	bl	8000e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002b8:	bf00      	nop
 80002ba:	3728      	adds	r7, #40	@ 0x28
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40006400 	.word	0x40006400
 80002c4:	40021000 	.word	0x40021000
 80002c8:	48000400 	.word	0x48000400

080002cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08c      	sub	sp, #48	@ 0x30
 80002d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	4b47      	ldr	r3, [pc, #284]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a46      	ldr	r2, [pc, #280]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b44      	ldr	r3, [pc, #272]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002f6:	61bb      	str	r3, [r7, #24]
 80002f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fa:	4b41      	ldr	r3, [pc, #260]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a40      	ldr	r2, [pc, #256]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000300:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b3e      	ldr	r3, [pc, #248]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b3b      	ldr	r3, [pc, #236]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a3a      	ldr	r2, [pc, #232]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000326:	613b      	str	r3, [r7, #16]
 8000328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	4b35      	ldr	r3, [pc, #212]	@ (8000400 <MX_GPIO_Init+0x134>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a34      	ldr	r2, [pc, #208]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000342:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a2e      	ldr	r2, [pc, #184]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <MX_GPIO_Init+0x134>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a28      	ldr	r2, [pc, #160]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b26      	ldr	r3, [pc, #152]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000378:	4822      	ldr	r0, [pc, #136]	@ (8000404 <MX_GPIO_Init+0x138>)
 800037a:	f000 fef7 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2140      	movs	r1, #64	@ 0x40
 8000382:	4821      	ldr	r0, [pc, #132]	@ (8000408 <MX_GPIO_Init+0x13c>)
 8000384:	f000 fef2 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	4619      	mov	r1, r3
 800039e:	481b      	ldr	r0, [pc, #108]	@ (800040c <MX_GPIO_Init+0x140>)
 80003a0:	f000 fd42 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80003a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80003a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 031c 	add.w	r3, r7, #28
 80003ba:	4619      	mov	r1, r3
 80003bc:	4811      	ldr	r0, [pc, #68]	@ (8000404 <MX_GPIO_Init+0x138>)
 80003be:	f000 fd33 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003c2:	2340      	movs	r3, #64	@ 0x40
 80003c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 031c 	add.w	r3, r7, #28
 80003d6:	4619      	mov	r1, r3
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <MX_GPIO_Init+0x13c>)
 80003da:	f000 fd25 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80003de:	2380      	movs	r3, #128	@ 0x80
 80003e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e2:	2300      	movs	r3, #0
 80003e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0x13c>)
 80003f2:	f000 fd19 	bl	8000e28 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3730      	adds	r7, #48	@ 0x30
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400
 8000408:	48001800 	.word	0x48001800
 800040c:	48000800 	.word	0x48000800

08000410 <SetPinOutput>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

// Custom defined functions
void SetPinOutput(uint16_t GPIO_Pin, GPIO_PinState PinState, uint16_t Delay)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
 800041a:	460b      	mov	r3, r1
 800041c:	717b      	strb	r3, [r7, #5]
 800041e:	4613      	mov	r3, r2
 8000420:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState);
 8000422:	797a      	ldrb	r2, [r7, #5]
 8000424:	88fb      	ldrh	r3, [r7, #6]
 8000426:	4619      	mov	r1, r3
 8000428:	4806      	ldr	r0, [pc, #24]	@ (8000444 <SetPinOutput+0x34>)
 800042a:	f000 fe9f 	bl	800116c <HAL_GPIO_WritePin>
	if(Delay > 0){
 800042e:	887b      	ldrh	r3, [r7, #2]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d003      	beq.n	800043c <SetPinOutput+0x2c>
		HAL_Delay(Delay);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 faf0 	bl	8000a1c <HAL_Delay>
	}
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	48000400 	.word	0x48000400

08000448 <JeuxDeLumiere>:
		SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 0);
	}
}

void JeuxDeLumiere()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	GPIO_PinState input = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 800044e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000452:	4832      	ldr	r0, [pc, #200]	@ (800051c <JeuxDeLumiere+0xd4>)
 8000454:	f000 fe72 	bl	800113c <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	71fb      	strb	r3, [r7, #7]

	SetPinOutput(LD1_Pin, GPIO_PIN_SET, 500 + 500 * input);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	3301      	adds	r3, #1
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	0152      	lsls	r2, r2, #5
 8000466:	1ad2      	subs	r2, r2, r3
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4413      	add	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	b29b      	uxth	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	2101      	movs	r1, #1
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ffcb 	bl	8000410 <SetPinOutput>
	SetPinOutput(LD1_Pin, GPIO_PIN_RESET, 500 + 500 * input);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	3301      	adds	r3, #1
 800047e:	b29b      	uxth	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	0152      	lsls	r2, r2, #5
 8000484:	1ad2      	subs	r2, r2, r3
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	4413      	add	r3, r2
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	b29b      	uxth	r3, r3
 800048e:	461a      	mov	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ffbc 	bl	8000410 <SetPinOutput>
	SetPinOutput(LD2_Pin, GPIO_PIN_SET, 500 + 500 * input);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	3301      	adds	r3, #1
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	0152      	lsls	r2, r2, #5
 80004a2:	1ad2      	subs	r2, r2, r3
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	2101      	movs	r1, #1
 80004b0:	2080      	movs	r0, #128	@ 0x80
 80004b2:	f7ff ffad 	bl	8000410 <SetPinOutput>
	SetPinOutput(LD2_Pin, GPIO_PIN_RESET, 500 + 500 * input);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	0152      	lsls	r2, r2, #5
 80004c0:	1ad2      	subs	r2, r2, r3
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	2080      	movs	r0, #128	@ 0x80
 80004d0:	f7ff ff9e 	bl	8000410 <SetPinOutput>
	SetPinOutput(LD3_Pin, GPIO_PIN_SET, 500 + 500 * input);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	3301      	adds	r3, #1
 80004d8:	b29b      	uxth	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	0152      	lsls	r2, r2, #5
 80004de:	1ad2      	subs	r2, r2, r3
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	2101      	movs	r1, #1
 80004ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80004f0:	f7ff ff8e 	bl	8000410 <SetPinOutput>
	SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 500 + 500 * input);
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3301      	adds	r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	0152      	lsls	r2, r2, #5
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	0092      	lsls	r2, r2, #2
 8000502:	4413      	add	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	b29b      	uxth	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000510:	f7ff ff7e 	bl	8000410 <SetPinOutput>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000800 	.word	0x48000800

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fa14 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f80e 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff fece 	bl	80002cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000530:	f000 f878 	bl	8000624 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000534:	f000 f928 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000538:	f000 f99a 	bl	8000870 <MX_USB_PCD_Init>
  MX_CAN_Init();
 800053c:	f7ff fe4a 	bl	80001d4 <MX_CAN_Init>
	  SetPinOutput(LD2_Pin, GPIO_PIN_RESET, 600);
	  SetPinOutput(LD3_Pin, GPIO_PIN_SET, 700);
	  SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 700);
	  */
//	  ReadBtn();
	  JeuxDeLumiere();
 8000540:	f7ff ff82 	bl	8000448 <JeuxDeLumiere>
 8000544:	e7fc      	b.n	8000540 <main+0x20>
	...

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0a6      	sub	sp, #152	@ 0x98
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000552:	2228      	movs	r2, #40	@ 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f8f6 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2258      	movs	r2, #88	@ 0x58
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f8e8 	bl	8003748 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000578:	2309      	movs	r3, #9
 800057a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800057c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000580:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800059a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800059e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 febd 	bl	800132c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005b8:	f000 f82e 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fefb 	bl	80023d4 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005e4:	f000 f818 	bl	8000618 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <SystemClock_Config+0xcc>)
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 f909 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 f806 	bl	8000618 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3798      	adds	r7, #152	@ 0x98
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	00030004 	.word	0x00030004

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <Error_Handler+0x8>

08000624 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_RTC_Init+0x44>)
 800062a:	4a10      	ldr	r2, [pc, #64]	@ (800066c <MX_RTC_Init+0x48>)
 800062c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_RTC_Init+0x44>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_RTC_Init+0x44>)
 8000636:	227f      	movs	r2, #127	@ 0x7f
 8000638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_RTC_Init+0x44>)
 800063c:	22ff      	movs	r2, #255	@ 0xff
 800063e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_RTC_Init+0x44>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_RTC_Init+0x44>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_RTC_Init+0x44>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_RTC_Init+0x44>)
 8000654:	f002 fafc 	bl	8002c50 <HAL_RTC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800065e:	f7ff ffdb 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000050 	.word	0x20000050
 800066c:	40002800 	.word	0x40002800

08000670 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <HAL_RTC_MspInit+0x44>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d111      	bne.n	80006a6 <HAL_RTC_MspInit+0x36>
 8000682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000686:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	fa93 f3a3 	rbit	r3, r3
 800068e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000690:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000692:	fab3 f383 	clz	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <HAL_RTC_MspInit+0x48>)
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	461a      	mov	r2, r3
 80006a2:	2301      	movs	r3, #1
 80006a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40002800 	.word	0x40002800
 80006b8:	10908100 	.word	0x10908100

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_MspInit+0x44>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_MspInit+0x44>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <NMI_Handler+0x4>

0800070c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <MemManage_Handler+0x4>

0800071c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <UsageFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075a:	f000 f93f 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <SystemInit+0x20>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <SystemInit+0x20>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART3_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 8000794:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART3_UART_Init+0x58>)
 80007cc:	f002 fb46 	bl	8002e5c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f7ff ff1f 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000070 	.word	0x20000070
 80007e4:	40004800 	.word	0x40004800

080007e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d128      	bne.n	800085c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_UART_MspInit+0x80>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800083a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800083e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800084c:	2307      	movs	r3, #7
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <HAL_UART_MspInit+0x84>)
 8000858:	f000 fae6 	bl	8000e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004800 	.word	0x40004800
 8000868:	40021000 	.word	0x40021000
 800086c:	48000c00 	.word	0x48000c00

08000870 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <MX_USB_PCD_Init+0x48>)
 8000878:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 800087c:	2208      	movs	r2, #8
 800087e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 8000882:	2202      	movs	r2, #2
 8000884:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 8000888:	2202      	movs	r2, #2
 800088a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 8000894:	2200      	movs	r2, #0
 8000896:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 800089a:	2200      	movs	r2, #0
 800089c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USB_PCD_Init+0x44>)
 80008a0:	f000 fc7c 	bl	800119c <HAL_PCD_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80008aa:	f7ff feb5 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000f8 	.word	0x200000f8
 80008b8:	40005c00 	.word	0x40005c00

080008bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_PCD_MspInit+0x38>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d10b      	bne.n	80008e6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <HAL_PCD_MspInit+0x3c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <HAL_PCD_MspInit+0x3c>)
 80008d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <HAL_PCD_MspInit+0x3c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40005c00 	.word	0x40005c00
 80008f8:	40021000 	.word	0x40021000

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ff30 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 ff15 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fdf7 	bl	8000520 <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000940:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 8000944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000948:	200003d0 	.word	0x200003d0

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fa2d 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fea6 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fa37 	bl	8000e0e <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 fa0d 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	200003cc 	.word	0x200003cc

08000a04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200003cc 	.word	0x200003cc

08000a1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0ed      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fbde 	bl	8000244 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a98:	f7ff ffb4 	bl	8000a04 <HAL_GetTick>
 8000a9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a9e:	e012      	b.n	8000ac6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa0:	f7ff ffb0 	bl	8000a04 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d90b      	bls.n	8000ac6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2205      	movs	r2, #5
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e0c5      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0e5      	beq.n	8000aa0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0202 	bic.w	r2, r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae4:	f7ff ff8e 	bl	8000a04 <HAL_GetTick>
 8000ae8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aea:	e012      	b.n	8000b12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aec:	f7ff ff8a 	bl	8000a04 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d90b      	bls.n	8000b12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e09f      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1e5      	bne.n	8000aec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d108      	bne.n	8000b3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e007      	b.n	8000b4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7e5b      	ldrb	r3, [r3, #25]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d108      	bne.n	8000b64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7e9b      	ldrb	r3, [r3, #26]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d108      	bne.n	8000b8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0220 	orr.w	r2, r2, #32
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e007      	b.n	8000b9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0220 	bic.w	r2, r2, #32
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7edb      	ldrb	r3, [r3, #27]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d108      	bne.n	8000bb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0210 	bic.w	r2, r2, #16
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e007      	b.n	8000bc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0210 	orr.w	r2, r2, #16
 8000bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7f1b      	ldrb	r3, [r3, #28]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d108      	bne.n	8000be2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0208 	orr.w	r2, r2, #8
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	e007      	b.n	8000bf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0208 	bic.w	r2, r2, #8
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7f5b      	ldrb	r3, [r3, #29]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d108      	bne.n	8000c0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f042 0204 	orr.w	r2, r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0204 	bic.w	r2, r2, #4
 8000c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	ea42 0103 	orr.w	r1, r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	1e5a      	subs	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff47 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff5c 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffb0 	bl	8000d7c <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e160      	b.n	80010fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8152 	beq.w	80010f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0203 	and.w	r2, r3, #3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80ac 	beq.w	80010f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001118 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8001118 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <HAL_GPIO_Init+0x2f0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb4:	4a59      	ldr	r2, [pc, #356]	@ (800111c <HAL_GPIO_Init+0x2f4>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fde:	d025      	beq.n	800102c <HAL_GPIO_Init+0x204>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	@ (8001120 <HAL_GPIO_Init+0x2f8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d01f      	beq.n	8001028 <HAL_GPIO_Init+0x200>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a4e      	ldr	r2, [pc, #312]	@ (8001124 <HAL_GPIO_Init+0x2fc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d019      	beq.n	8001024 <HAL_GPIO_Init+0x1fc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	@ (8001128 <HAL_GPIO_Init+0x300>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1f8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800112c <HAL_GPIO_Init+0x304>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1f4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4b      	ldr	r2, [pc, #300]	@ (8001130 <HAL_GPIO_Init+0x308>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1f0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4a      	ldr	r2, [pc, #296]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1ec>
 8001010:	2306      	movs	r3, #6
 8001012:	e00c      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001014:	2307      	movs	r3, #7
 8001016:	e00a      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001018:	2305      	movs	r3, #5
 800101a:	e008      	b.n	800102e <HAL_GPIO_Init+0x206>
 800101c:	2304      	movs	r3, #4
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001020:	2303      	movs	r3, #3
 8001022:	e004      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_GPIO_Init+0x206>
 800102c:	2300      	movs	r3, #0
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103e:	4937      	ldr	r1, [pc, #220]	@ (800111c <HAL_GPIO_Init+0x2f4>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104c:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <HAL_GPIO_Init+0x310>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001070:	4a31      	ldr	r2, [pc, #196]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001076:	4b30      	ldr	r3, [pc, #192]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800109a:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <HAL_GPIO_Init+0x310>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <HAL_GPIO_Init+0x310>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <HAL_GPIO_Init+0x310>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_GPIO_Init+0x310>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <HAL_GPIO_Init+0x310>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f ae97 	bne.w	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	48000c00 	.word	0x48000c00
 800112c:	48001000 	.word	0x48001000
 8001130:	48001400 	.word	0x48001400
 8001134:	48001800 	.word	0x48001800
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001188:	e002      	b.n	8001190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0b9      	b.n	8001322 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fb7a 	bl	80008bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fa7e 	bl	80036d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e03e      	b.n	800125e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	3311      	adds	r3, #17
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	440b      	add	r3, r1
 8001202:	3310      	adds	r3, #16
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	3313      	adds	r3, #19
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3320      	adds	r3, #32
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3324      	adds	r3, #36	@ 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3bb      	bcc.n	80011e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e044      	b.n	80012f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3b5      	bcc.n	800126e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800130e:	f002 f9fd 	bl	800370c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001332:	af00      	add	r7, sp, #0
 8001334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001338:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800133c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001342:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f001 b83a 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 816f 	beq.w	8001646 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001368:	4bb5      	ldr	r3, [pc, #724]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b04      	cmp	r3, #4
 8001372:	d00c      	beq.n	800138e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001374:	4bb2      	ldr	r3, [pc, #712]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d15c      	bne.n	800143a <HAL_RCC_OscConfig+0x10e>
 8001380:	4baf      	ldr	r3, [pc, #700]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138c:	d155      	bne.n	800143a <HAL_RCC_OscConfig+0x10e>
 800138e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001392:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 80013a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	095b      	lsrs	r3, r3, #5
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d102      	bne.n	80013c0 <HAL_RCC_OscConfig+0x94>
 80013ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	e015      	b.n	80013ec <HAL_RCC_OscConfig+0xc0>
 80013c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013c4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80013cc:	fa93 f3a3 	rbit	r3, r3
 80013d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80013d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013e8:	4b95      	ldr	r3, [pc, #596]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013f0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80013f4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80013f8:	fa92 f2a2 	rbit	r2, r2
 80013fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001400:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	f042 0220 	orr.w	r2, r2, #32
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f002 021f 	and.w	r2, r2, #31
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8111 	beq.w	8001644 <HAL_RCC_OscConfig+0x318>
 8001422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001426:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8108 	bne.w	8001644 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f000 bfc6 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x12e>
 800144c:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a7b      	ldr	r2, [pc, #492]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e036      	b.n	80014c8 <HAL_RCC_OscConfig+0x19c>
 800145a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x158>
 800146a:	4b75      	ldr	r3, [pc, #468]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a74      	ldr	r2, [pc, #464]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a71      	ldr	r2, [pc, #452]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 800147c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e021      	b.n	80014c8 <HAL_RCC_OscConfig+0x19c>
 8001484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001488:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x184>
 8001496:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a69      	ldr	r2, [pc, #420]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a66      	ldr	r2, [pc, #408]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0x19c>
 80014b0:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a62      	ldr	r2, [pc, #392]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5f      	ldr	r2, [pc, #380]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d059      	beq.n	800158c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa94 	bl	8000a04 <HAL_GetTick>
 80014dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fa8f 	bl	8000a04 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d902      	bls.n	80014f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f000 bf67 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 80014f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014fc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800150c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <HAL_RCC_OscConfig+0x1fe>
 8001524:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x22a>
 800152a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800152e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800153e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001542:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001546:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800155a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800155e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001562:	fa92 f2a2 	rbit	r2, r2
 8001566:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800156a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800156e:	fab2 f282 	clz	r2, r2
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f002 021f 	and.w	r2, r2, #31
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ab      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1b6>
 800158a:	e05c      	b.n	8001646 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fa3a 	bl	8000a04 <HAL_GetTick>
 8001590:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fa35 	bl	8000a04 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d902      	bls.n	80015ac <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f000 bf0d 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 80015ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80015c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_RCC_OscConfig+0x2b2>
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x2de>
 80015de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80015f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015f6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80015fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_RCC_OscConfig+0x314>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001612:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001616:	fa92 f2a2 	rbit	r2, r2
 800161a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800161e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001622:	fab2 f282 	clz	r2, r2
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ab      	bne.n	8001596 <HAL_RCC_OscConfig+0x26a>
 800163e:	e002      	b.n	8001646 <HAL_RCC_OscConfig+0x31a>
 8001640:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 817f 	beq.w	800195a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800165c:	4ba7      	ldr	r3, [pc, #668]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00c      	beq.n	8001682 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001668:	4ba4      	ldr	r3, [pc, #656]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d173      	bne.n	800175c <HAL_RCC_OscConfig+0x430>
 8001674:	4ba1      	ldr	r3, [pc, #644]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800167c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001680:	d16c      	bne.n	800175c <HAL_RCC_OscConfig+0x430>
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001694:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0x386>
 80016ac:	4b93      	ldr	r3, [pc, #588]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	e013      	b.n	80016da <HAL_RCC_OscConfig+0x3ae>
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016d6:	4b89      	ldr	r3, [pc, #548]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	2202      	movs	r2, #2
 80016dc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80016e0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80016e4:	fa92 f2a2 	rbit	r2, r2
 80016e8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80016ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80016f0:	fab2 f282 	clz	r2, r2
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f002 021f 	and.w	r2, r2, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <HAL_RCC_OscConfig+0x3f6>
 800170c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001710:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d002      	beq.n	8001722 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f000 be52 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b76      	ldr	r3, [pc, #472]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	21f8      	movs	r1, #248	@ 0xf8
 8001738:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001740:	fa91 f1a1 	rbit	r1, r1
 8001744:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001748:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800174c:	fab1 f181 	clz	r1, r1
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	408b      	lsls	r3, r1
 8001754:	4969      	ldr	r1, [pc, #420]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e0fe      	b.n	800195a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001760:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8088 	beq.w	800187e <HAL_RCC_OscConfig+0x552>
 800176e:	2301      	movs	r3, #1
 8001770:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001780:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800178e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	461a      	mov	r2, r3
 8001796:	2301      	movs	r3, #1
 8001798:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f933 	bl	8000a04 <HAL_GetTick>
 800179e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff f92e 	bl	8000a04 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d902      	bls.n	80017ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f000 be06 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80017cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x4be>
 80017e4:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e013      	b.n	8001812 <HAL_RCC_OscConfig+0x4e6>
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001802:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	2202      	movs	r2, #2
 8001814:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001818:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800181c:	fa92 f2a2 	rbit	r2, r2
 8001820:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001824:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0af      	beq.n	80017a4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800184c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	21f8      	movs	r1, #248	@ 0xf8
 800185a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001862:	fa91 f1a1 	rbit	r1, r1
 8001866:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800186a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800186e:	fab1 f181 	clz	r1, r1
 8001872:	b2c9      	uxtb	r1, r1
 8001874:	408b      	lsls	r3, r1
 8001876:	4921      	ldr	r1, [pc, #132]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e06d      	b.n	800195a <HAL_RCC_OscConfig+0x62e>
 800187e:	2301      	movs	r3, #1
 8001880:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001890:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800189e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	461a      	mov	r2, r3
 80018a6:	2300      	movs	r3, #0
 80018a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff f8ab 	bl	8000a04 <HAL_GetTick>
 80018ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff f8a6 	bl	8000a04 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d902      	bls.n	80018ca <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f000 bd7e 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80018dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x5d4>
 80018f4:	4b01      	ldr	r3, [pc, #4]	@ (80018fc <HAL_RCC_OscConfig+0x5d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e016      	b.n	8001928 <HAL_RCC_OscConfig+0x5fc>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001918:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001924:	4bbf      	ldr	r3, [pc, #764]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2202      	movs	r2, #2
 800192a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800192e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001932:	fa92 f2a2 	rbit	r2, r2
 8001936:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800193a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f042 0220 	orr.w	r2, r2, #32
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f002 021f 	and.w	r2, r2, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ac      	bne.n	80018b4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8113 	beq.w	8001b96 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001974:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d07c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x74e>
 8001980:	2301      	movs	r3, #1
 8001982:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001992:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4ba2      	ldr	r3, [pc, #648]	@ (8001c28 <HAL_RCC_OscConfig+0x8fc>)
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2301      	movs	r3, #1
 80019a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff f82b 	bl	8000a04 <HAL_GetTick>
 80019ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff f826 	bl	8000a04 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d902      	bls.n	80019ca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 bcfe 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a36:	2102      	movs	r1, #2
 8001a38:	6019      	str	r1, [r3, #0]
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f1a3 	rbit	r1, r3
 8001a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a50:	6019      	str	r1, [r3, #0]
  return result;
 8001a52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d09d      	beq.n	80019b4 <HAL_RCC_OscConfig+0x688>
 8001a78:	e08d      	b.n	8001b96 <HAL_RCC_OscConfig+0x86a>
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001aa6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x8fc>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe ffa2 	bl	8000a04 <HAL_GetTick>
 8001ac0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7fe ff9d 	bl	8000a04 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d902      	bls.n	8001adc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f000 bc75 	b.w	80023c6 <HAL_RCC_OscConfig+0x109a>
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b54:	2102      	movs	r1, #2
 8001b56:	6019      	str	r1, [r3, #0]
 8001b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f1a3 	rbit	r1, r3
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b6e:	6019      	str	r1, [r3, #0]
  return result;
 8001b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d197      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 81a5 	beq.w	8001ef6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_RCC_OscConfig+0x8f8>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_RCC_OscConfig+0x900>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d121      	bne.n	8001c3c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_RCC_OscConfig+0x900>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_RCC_OscConfig+0x900>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c04:	f7fe fefe 	bl	8000a04 <HAL_GetTick>
 8001c08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e010      	b.n	8001c30 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7fe fef9 	bl	8000a04 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	@ 0x64
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e3d1      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	10908120 	.word	0x10908120
 8001c2c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b8d      	ldr	r3, [pc, #564]	@ (8001e68 <HAL_RCC_OscConfig+0xb3c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0e8      	beq.n	8001c0e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x92e>
 8001c4c:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a86      	ldr	r2, [pc, #536]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e035      	b.n	8001cc6 <HAL_RCC_OscConfig+0x99a>
 8001c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x958>
 8001c6a:	4b80      	ldr	r3, [pc, #512]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a7f      	ldr	r2, [pc, #508]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	e020      	b.n	8001cc6 <HAL_RCC_OscConfig+0x99a>
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d10c      	bne.n	8001cae <HAL_RCC_OscConfig+0x982>
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a74      	ldr	r2, [pc, #464]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	4b72      	ldr	r3, [pc, #456]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a71      	ldr	r2, [pc, #452]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e00b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x99a>
 8001cae:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b6c      	ldr	r3, [pc, #432]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8081 	beq.w	8001dda <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7fe fe94 	bl	8000a04 <HAL_GetTick>
 8001cdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe fe8f 	bl	8000a04 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e365      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 8001cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d46:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0xa3a>
 8001d60:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0xa62>
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d96:	2102      	movs	r1, #2
 8001d98:	6011      	str	r1, [r2, #0]
 8001d9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d9e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fa92 f1a2 	rbit	r1, r2
 8001da8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dac:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001db0:	6011      	str	r1, [r2, #0]
  return result;
 8001db2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001db6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d084      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x9b6>
 8001dd8:	e083      	b.n	8001ee2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fe13 	bl	8000a04 <HAL_GetTick>
 8001dde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7fe fe0e 	bl	8000a04 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e2e4      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 8001dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0xb44>
 8001e62:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <HAL_RCC_OscConfig+0xb40>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	e017      	b.n	8001e98 <HAL_RCC_OscConfig+0xb6c>
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e74:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e80:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4bb3      	ldr	r3, [pc, #716]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e9c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	6011      	str	r1, [r2, #0]
 8001ea4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ea8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fa92 f1a2 	rbit	r1, r2
 8001eb2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eb6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001eba:	6011      	str	r1, [r2, #0]
  return result;
 8001ebc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ec0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d180      	bne.n	8001de4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b9e      	ldr	r3, [pc, #632]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a9d      	ldr	r2, [pc, #628]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 825e 	beq.w	80023c4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	4b96      	ldr	r3, [pc, #600]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f000 821f 	beq.w	8002354 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	f040 8170 	bne.w	8002208 <HAL_RCC_OscConfig+0xedc>
 8001f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f4c:	601a      	str	r2, [r3, #0]
  return result;
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f56:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fd49 	bl	8000a04 <HAL_GetTick>
 8001f72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fd44 	bl	8000a04 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e21c      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fb0:	601a      	str	r2, [r3, #0]
  return result;
 8001fb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0xcaa>
 8001fd0:	4b64      	ldr	r3, [pc, #400]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e027      	b.n	8002026 <HAL_RCC_OscConfig+0xcfa>
 8001fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fda:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002004:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b50      	ldr	r3, [pc, #320]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800202a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800202e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002032:	6011      	str	r1, [r2, #0]
 8002034:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002038:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fa92 f1a2 	rbit	r1, r2
 8002042:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002046:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800204a:	6011      	str	r1, [r2, #0]
  return result;
 800204c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002050:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d182      	bne.n	8001f78 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	f023 020f 	bic.w	r2, r3, #15
 800207a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	4937      	ldr	r1, [pc, #220]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 8002088:	4313      	orrs	r3, r2
 800208a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800208c:	4b35      	ldr	r3, [pc, #212]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a19      	ldr	r1, [r3, #32]
 80020a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	492d      	ldr	r1, [pc, #180]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020d8:	601a      	str	r2, [r3, #0]
  return result;
 80020da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020e2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fc83 	bl	8000a04 <HAL_GetTick>
 80020fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002102:	e009      	b.n	8002118 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fc7e 	bl	8000a04 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e156      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002120:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800213c:	601a      	str	r2, [r3, #0]
  return result;
 800213e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002142:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002146:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0xe3c>
 800215c:	4b01      	ldr	r3, [pc, #4]	@ (8002164 <HAL_RCC_OscConfig+0xe38>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e02a      	b.n	80021b8 <HAL_RCC_OscConfig+0xe8c>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002188:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002192:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ae:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	4b86      	ldr	r3, [pc, #536]	@ (80023d0 <HAL_RCC_OscConfig+0x10a4>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021c4:	6011      	str	r1, [r2, #0]
 80021c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	fa92 f1a2 	rbit	r1, r2
 80021d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021d8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021dc:	6011      	str	r1, [r2, #0]
  return result;
 80021de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021e2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	f43f af7f 	beq.w	8002104 <HAL_RCC_OscConfig+0xdd8>
 8002206:	e0dd      	b.n	80023c4 <HAL_RCC_OscConfig+0x1098>
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800222c:	601a      	str	r2, [r3, #0]
  return result;
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002236:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	2300      	movs	r3, #0
 800224c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fbd9 	bl	8000a04 <HAL_GetTick>
 8002252:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	e009      	b.n	800226c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fbd4 	bl	8000a04 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0ac      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800229a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0xf8a>
 80022b0:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_OscConfig+0x10a4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e027      	b.n	8002306 <HAL_RCC_OscConfig+0xfda>
 80022b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ba:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_RCC_OscConfig+0x10a4>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800230a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800230e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002312:	6011      	str	r1, [r2, #0]
 8002314:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002318:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	fa92 f1a2 	rbit	r1, r2
 8002322:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002326:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800232a:	6011      	str	r1, [r2, #0]
  return result;
 800232c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002330:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d182      	bne.n	8002258 <HAL_RCC_OscConfig+0xf2c>
 8002352:	e037      	b.n	80023c4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002358:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e02e      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_OscConfig+0x10a4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_RCC_OscConfig+0x10a4>)
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800237c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002384:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	d117      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002390:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002394:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09e      	sub	sp, #120	@ 0x78
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e162      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b90      	ldr	r3, [pc, #576]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d910      	bls.n	800241c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	498b      	ldr	r1, [pc, #556]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b89      	ldr	r3, [pc, #548]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e14a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b82      	ldr	r3, [pc, #520]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	497f      	ldr	r1, [pc, #508]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80dc 	beq.w	8002600 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d13c      	bne.n	80024ca <HAL_RCC_ClockConfig+0xf6>
 8002450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002454:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800245e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_ClockConfig+0xa6>
 8002474:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e00f      	b.n	800249a <HAL_RCC_ClockConfig+0xc6>
 800247a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800247e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	667b      	str	r3, [r7, #100]	@ 0x64
 8002488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800248c:	663b      	str	r3, [r7, #96]	@ 0x60
 800248e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002496:	4b67      	ldr	r3, [pc, #412]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800249e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024a2:	fa92 f2a2 	rbit	r2, r2
 80024a6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024aa:	fab2 f282 	clz	r2, r2
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	f042 0220 	orr.w	r2, r2, #32
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	f002 021f 	and.w	r2, r2, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d17b      	bne.n	80025be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0f3      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d13c      	bne.n	800254c <HAL_RCC_ClockConfig+0x178>
 80024d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_ClockConfig+0x128>
 80024f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	e00f      	b.n	800251c <HAL_RCC_ClockConfig+0x148>
 80024fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002500:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
 800250a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800250e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002518:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002520:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800252a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d13a      	bne.n	80025be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b2      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
 800254c:	2302      	movs	r3, #2
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_RCC_ClockConfig+0x1a0>
 800256e:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e00d      	b.n	8002590 <HAL_RCC_ClockConfig+0x1bc>
 8002574:	2302      	movs	r3, #2
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	2202      	movs	r2, #2
 8002592:	61ba      	str	r2, [r7, #24]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	fa92 f2a2 	rbit	r2, r2
 800259a:	617a      	str	r2, [r7, #20]
  return result;
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	fab2 f282 	clz	r2, r2
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f042 0220 	orr.w	r2, r2, #32
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 021f 	and.w	r2, r2, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e079      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	491a      	ldr	r1, [pc, #104]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fa18 	bl	8000a04 <HAL_GetTick>
 80025d4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fa14 	bl	8000a04 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e061      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_ClockConfig+0x260>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d214      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4906      	ldr	r1, [pc, #24]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <HAL_RCC_ClockConfig+0x25c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e040      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2de>
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_RCC_ClockConfig+0x2e8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	491a      	ldr	r1, [pc, #104]	@ (80026bc <HAL_RCC_ClockConfig+0x2e8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_RCC_ClockConfig+0x2e8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4912      	ldr	r1, [pc, #72]	@ (80026bc <HAL_RCC_ClockConfig+0x2e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002676:	f000 f829 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800267a:	4601      	mov	r1, r0
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_RCC_ClockConfig+0x2e8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002684:	22f0      	movs	r2, #240	@ 0xf0
 8002686:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	60fa      	str	r2, [r7, #12]
  return result;
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	40d3      	lsrs	r3, r2
 800269a:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x2ec>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	fa21 f303 	lsr.w	r3, r1, r3
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <HAL_RCC_ClockConfig+0x2f0>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCC_ClockConfig+0x2f4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe f966 	bl	800097c <HAL_InitTick>
  
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3778      	adds	r7, #120	@ 0x78
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	080037b8 	.word	0x080037b8
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x30>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x36>
 80026fa:	e029      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026fe:	613b      	str	r3, [r7, #16]
      break;
 8002700:	e029      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a18      	ldr	r2, [pc, #96]	@ (800276c <HAL_RCC_GetSysClockFreq+0xa0>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	4a15      	ldr	r2, [pc, #84]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xa4>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e007      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800273a:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	613b      	str	r3, [r7, #16]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002752:	613b      	str	r3, [r7, #16]
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	693b      	ldr	r3, [r7, #16]
}
 8002758:	4618      	mov	r0, r3
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	007a1200 	.word	0x007a1200
 800276c:	080037d0 	.word	0x080037d0
 8002770:	080037e0 	.word	0x080037e0

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002792:	f7ff ffef 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027a0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	603a      	str	r2, [r7, #0]
  return result;
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080037c8 	.word	0x080037c8

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027d6:	f7ff ffcd 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027da:	4601      	mov	r1, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80027e4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80027e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	fa92 f2a2 	rbit	r2, r2
 80027f0:	603a      	str	r2, [r7, #0]
  return result;
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	40d3      	lsrs	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	080037c8 	.word	0x080037c8

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b092      	sub	sp, #72	@ 0x48
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80d4 	beq.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002838:	4b4e      	ldr	r3, [pc, #312]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10e      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b4b      	ldr	r3, [pc, #300]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	4a4a      	ldr	r2, [pc, #296]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284e:	61d3      	str	r3, [r2, #28]
 8002850:	4b48      	ldr	r3, [pc, #288]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b45      	ldr	r3, [pc, #276]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a41      	ldr	r2, [pc, #260]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe f8c3 	bl	8000a04 <HAL_GetTick>
 800287e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe f8bf 	bl	8000a04 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1d6      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8084 	beq.w	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028bc:	429a      	cmp	r2, r3
 80028be:	d07c      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	461a      	mov	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002916:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d04b      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe f86f 	bl	8000a04 <HAL_GetTick>
 8002926:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe f86b 	bl	8000a04 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e180      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002940:	2302      	movs	r3, #2
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
 800294c:	2302      	movs	r3, #2
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	61fb      	str	r3, [r7, #28]
  return result;
 8002958:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d108      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800296e:	4b01      	ldr	r3, [pc, #4]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	e00d      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002974:	40021000 	.word	0x40021000
 8002978:	40007000 	.word	0x40007000
 800297c:	10908100 	.word	0x10908100
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2202      	movs	r2, #2
 8002992:	613a      	str	r2, [r7, #16]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	60fa      	str	r2, [r7, #12]
  return result;
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0b7      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ba:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	498c      	ldr	r1, [pc, #560]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b88      	ldr	r3, [pc, #544]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4a87      	ldr	r2, [pc, #540]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ec:	4b82      	ldr	r3, [pc, #520]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f023 0203 	bic.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	497f      	ldr	r1, [pc, #508]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4978      	ldr	r1, [pc, #480]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a28:	4b73      	ldr	r3, [pc, #460]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4970      	ldr	r1, [pc, #448]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4969      	ldr	r1, [pc, #420]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	4961      	ldr	r1, [pc, #388]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a82:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f023 0220 	bic.w	r2, r3, #32
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	495a      	ldr	r1, [pc, #360]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa0:	4b55      	ldr	r3, [pc, #340]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	4952      	ldr	r1, [pc, #328]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abe:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	494b      	ldr	r1, [pc, #300]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002adc:	4b46      	ldr	r3, [pc, #280]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4943      	ldr	r1, [pc, #268]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	493c      	ldr	r1, [pc, #240]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b18:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b36:	4b30      	ldr	r3, [pc, #192]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	492d      	ldr	r1, [pc, #180]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	4925      	ldr	r1, [pc, #148]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b72:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	491e      	ldr	r1, [pc, #120]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bba:	490f      	ldr	r1, [pc, #60]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	4907      	ldr	r1, [pc, #28]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bea:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfe:	4913      	ldr	r1, [pc, #76]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1c:	490b      	ldr	r1, [pc, #44]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c3a:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3748      	adds	r7, #72	@ 0x48
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e073      	b.n	8002d4e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7f5b      	ldrb	r3, [r3, #29]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fcfa 	bl	8000670 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d055      	beq.n	8002d3c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ca      	movs	r2, #202	@ 0xca
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2253      	movs	r2, #83	@ 0x53
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f87f 	bl	8002da4 <RTC_EnterInitMode>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d12c      	bne.n	8002d0a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	041a      	lsls	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f886 	bl	8002e12 <RTC_ExitInitMode>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d110      	bne.n	8002d32 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22ff      	movs	r2, #255	@ 0xff
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d3a:	e001      	b.n	8002d40 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <HAL_RTC_WaitForSynchro+0x48>)
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6c:	f7fd fe4a 	bl	8000a04 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d72:	e009      	b.n	8002d88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d74:	f7fd fe46 	bl	8000a04 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d82:	d901      	bls.n	8002d88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e007      	b.n	8002d98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ee      	beq.n	8002d74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	0001ff5f 	.word	0x0001ff5f

08002da4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d122      	bne.n	8002e08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd2:	f7fd fe17 	bl	8000a04 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002dd8:	e00c      	b.n	8002df4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dda:	f7fd fe13 	bl	8000a04 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002de8:	d904      	bls.n	8002df4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2204      	movs	r2, #4
 8002dee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <RTC_EnterInitMode+0x64>
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d1e8      	bne.n	8002dda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff8b 	bl	8002d58 <HAL_RTC_WaitForSynchro>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e040      	b.n	8002ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fcb2 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f9fc 	bl	80032a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f825 	bl	8002ef8 <UART_SetConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e01b      	b.n	8002ef0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fa7b 	bl	80033e4 <UART_CheckIdleState>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b92      	ldr	r3, [pc, #584]	@ (800316c <UART_SetConfig+0x274>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	@ (8003170 <UART_SetConfig+0x278>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d120      	bne.n	8002fb6 <UART_SetConfig+0xbe>
 8002f74:	4b7f      	ldr	r3, [pc, #508]	@ (8003174 <UART_SetConfig+0x27c>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d817      	bhi.n	8002fb0 <UART_SetConfig+0xb8>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <UART_SetConfig+0x90>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fab 	.word	0x08002fab
 8002f94:	08002f9f 	.word	0x08002f9f
 8002f98:	2301      	movs	r3, #1
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0b5      	b.n	800310a <UART_SetConfig+0x212>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e0b2      	b.n	800310a <UART_SetConfig+0x212>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0af      	b.n	800310a <UART_SetConfig+0x212>
 8002faa:	2308      	movs	r3, #8
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0ac      	b.n	800310a <UART_SetConfig+0x212>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0a9      	b.n	800310a <UART_SetConfig+0x212>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	@ (8003178 <UART_SetConfig+0x280>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d124      	bne.n	800300a <UART_SetConfig+0x112>
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <UART_SetConfig+0x27c>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fcc:	d011      	beq.n	8002ff2 <UART_SetConfig+0xfa>
 8002fce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fd2:	d817      	bhi.n	8003004 <UART_SetConfig+0x10c>
 8002fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd8:	d011      	beq.n	8002ffe <UART_SetConfig+0x106>
 8002fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fde:	d811      	bhi.n	8003004 <UART_SetConfig+0x10c>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <UART_SetConfig+0xf4>
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d006      	beq.n	8002ff8 <UART_SetConfig+0x100>
 8002fea:	e00b      	b.n	8003004 <UART_SetConfig+0x10c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e08b      	b.n	800310a <UART_SetConfig+0x212>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e088      	b.n	800310a <UART_SetConfig+0x212>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e085      	b.n	800310a <UART_SetConfig+0x212>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e082      	b.n	800310a <UART_SetConfig+0x212>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e07f      	b.n	800310a <UART_SetConfig+0x212>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5b      	ldr	r2, [pc, #364]	@ (800317c <UART_SetConfig+0x284>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d124      	bne.n	800305e <UART_SetConfig+0x166>
 8003014:	4b57      	ldr	r3, [pc, #348]	@ (8003174 <UART_SetConfig+0x27c>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800301c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003020:	d011      	beq.n	8003046 <UART_SetConfig+0x14e>
 8003022:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003026:	d817      	bhi.n	8003058 <UART_SetConfig+0x160>
 8003028:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800302c:	d011      	beq.n	8003052 <UART_SetConfig+0x15a>
 800302e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003032:	d811      	bhi.n	8003058 <UART_SetConfig+0x160>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <UART_SetConfig+0x148>
 8003038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800303c:	d006      	beq.n	800304c <UART_SetConfig+0x154>
 800303e:	e00b      	b.n	8003058 <UART_SetConfig+0x160>
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e061      	b.n	800310a <UART_SetConfig+0x212>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e05e      	b.n	800310a <UART_SetConfig+0x212>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e05b      	b.n	800310a <UART_SetConfig+0x212>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e058      	b.n	800310a <UART_SetConfig+0x212>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e055      	b.n	800310a <UART_SetConfig+0x212>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a47      	ldr	r2, [pc, #284]	@ (8003180 <UART_SetConfig+0x288>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d124      	bne.n	80030b2 <UART_SetConfig+0x1ba>
 8003068:	4b42      	ldr	r3, [pc, #264]	@ (8003174 <UART_SetConfig+0x27c>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003070:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003074:	d011      	beq.n	800309a <UART_SetConfig+0x1a2>
 8003076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800307a:	d817      	bhi.n	80030ac <UART_SetConfig+0x1b4>
 800307c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003080:	d011      	beq.n	80030a6 <UART_SetConfig+0x1ae>
 8003082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003086:	d811      	bhi.n	80030ac <UART_SetConfig+0x1b4>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <UART_SetConfig+0x19c>
 800308c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003090:	d006      	beq.n	80030a0 <UART_SetConfig+0x1a8>
 8003092:	e00b      	b.n	80030ac <UART_SetConfig+0x1b4>
 8003094:	2300      	movs	r3, #0
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e037      	b.n	800310a <UART_SetConfig+0x212>
 800309a:	2302      	movs	r3, #2
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e034      	b.n	800310a <UART_SetConfig+0x212>
 80030a0:	2304      	movs	r3, #4
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e031      	b.n	800310a <UART_SetConfig+0x212>
 80030a6:	2308      	movs	r3, #8
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e02e      	b.n	800310a <UART_SetConfig+0x212>
 80030ac:	2310      	movs	r3, #16
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e02b      	b.n	800310a <UART_SetConfig+0x212>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	@ (8003184 <UART_SetConfig+0x28c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d124      	bne.n	8003106 <UART_SetConfig+0x20e>
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <UART_SetConfig+0x27c>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80030c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030c8:	d011      	beq.n	80030ee <UART_SetConfig+0x1f6>
 80030ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030ce:	d817      	bhi.n	8003100 <UART_SetConfig+0x208>
 80030d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030d4:	d011      	beq.n	80030fa <UART_SetConfig+0x202>
 80030d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030da:	d811      	bhi.n	8003100 <UART_SetConfig+0x208>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <UART_SetConfig+0x1f0>
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e4:	d006      	beq.n	80030f4 <UART_SetConfig+0x1fc>
 80030e6:	e00b      	b.n	8003100 <UART_SetConfig+0x208>
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e00d      	b.n	800310a <UART_SetConfig+0x212>
 80030ee:	2302      	movs	r3, #2
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e00a      	b.n	800310a <UART_SetConfig+0x212>
 80030f4:	2304      	movs	r3, #4
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e007      	b.n	800310a <UART_SetConfig+0x212>
 80030fa:	2308      	movs	r3, #8
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e004      	b.n	800310a <UART_SetConfig+0x212>
 8003100:	2310      	movs	r3, #16
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e001      	b.n	800310a <UART_SetConfig+0x212>
 8003106:	2310      	movs	r3, #16
 8003108:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003112:	d16b      	bne.n	80031ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d838      	bhi.n	800318c <UART_SetConfig+0x294>
 800311a:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0x228>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003145 	.word	0x08003145
 8003124:	0800314d 	.word	0x0800314d
 8003128:	08003155 	.word	0x08003155
 800312c:	0800318d 	.word	0x0800318d
 8003130:	0800315b 	.word	0x0800315b
 8003134:	0800318d 	.word	0x0800318d
 8003138:	0800318d 	.word	0x0800318d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff fb22 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003148:	61b8      	str	r0, [r7, #24]
        break;
 800314a:	e024      	b.n	8003196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff fb40 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003150:	61b8      	str	r0, [r7, #24]
        break;
 8003152:	e020      	b.n	8003196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <UART_SetConfig+0x290>)
 8003156:	61bb      	str	r3, [r7, #24]
        break;
 8003158:	e01d      	b.n	8003196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7ff fab7 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800315e:	61b8      	str	r0, [r7, #24]
        break;
 8003160:	e019      	b.n	8003196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e015      	b.n	8003196 <UART_SetConfig+0x29e>
 800316a:	bf00      	nop
 800316c:	efff69f3 	.word	0xefff69f3
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40004c00 	.word	0x40004c00
 8003184:	40005000 	.word	0x40005000
 8003188:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77bb      	strb	r3, [r7, #30]
        break;
 8003194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d073      	beq.n	8003284 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	005a      	lsls	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d916      	bls.n	80031e6 <UART_SetConfig+0x2ee>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031be:	d212      	bcs.n	80031e6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f023 030f 	bic.w	r3, r3, #15
 80031c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	4313      	orrs	r3, r2
 80031da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	89fa      	ldrh	r2, [r7, #14]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	e04e      	b.n	8003284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77bb      	strb	r3, [r7, #30]
 80031ea:	e04b      	b.n	8003284 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d827      	bhi.n	8003242 <UART_SetConfig+0x34a>
 80031f2:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0x300>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff fab6 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff fad4 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <UART_SetConfig+0x3a4>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7ff fa4b 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085a      	lsrs	r2, r3, #1
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d909      	bls.n	8003280 <UART_SetConfig+0x388>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d205      	bcs.n	8003280 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e001      	b.n	8003284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003290:	7fbb      	ldrb	r3, [r7, #30]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	007a1200 	.word	0x007a1200

080032a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01a      	beq.n	80033b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339e:	d10a      	bne.n	80033b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b098      	sub	sp, #96	@ 0x60
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f4:	f7fd fb06 	bl	8000a04 <HAL_GetTick>
 80033f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d12e      	bne.n	8003466 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f88c 	bl	8003534 <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d021      	beq.n	8003466 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003436:	653b      	str	r3, [r7, #80]	@ 0x50
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003440:	647b      	str	r3, [r7, #68]	@ 0x44
 8003442:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800344e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e6      	bne.n	8003422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e062      	b.n	800352c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d149      	bne.n	8003508 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f856 	bl	8003534 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d03c      	beq.n	8003508 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	623b      	str	r3, [r7, #32]
   return(result);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e6      	bne.n	800348e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e0:	61fa      	str	r2, [r7, #28]
 80034e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	69b9      	ldr	r1, [r7, #24]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	617b      	str	r3, [r7, #20]
   return(result);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e011      	b.n	800352c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3758      	adds	r7, #88	@ 0x58
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003544:	e04f      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d04b      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fd fa59 	bl	8000a04 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <UART_WaitOnFlagUntilTimeout+0x30>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e04e      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d037      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d034      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d031      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d110      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2208      	movs	r2, #8
 8003596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f838 	bl	800360e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2208      	movs	r2, #8
 80035a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e029      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c0:	d111      	bne.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f81e 	bl	800360e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d0a0      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800360e:	b480      	push	{r7}
 8003610:	b095      	sub	sp, #84	@ 0x54
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003634:	643b      	str	r3, [r7, #64]	@ 0x40
 8003636:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800363a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e6      	bne.n	8003616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	61fb      	str	r3, [r7, #28]
   return(result);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003668:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800366e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	2b01      	cmp	r3, #1
 8003682:	d118      	bne.n	80036b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	60bb      	str	r3, [r7, #8]
   return(result);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f023 0310 	bic.w	r3, r3, #16
 8003698:	647b      	str	r3, [r7, #68]	@ 0x44
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	613b      	str	r3, [r7, #16]
   return(result);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e6      	bne.n	8003684 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036ca:	bf00      	nop
 80036cc:	3754      	adds	r7, #84	@ 0x54
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036de:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80036e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	@ (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	@ (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	@ (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <__libc_init_array+0x44>)
 800376c:	f000 f818 	bl	80037a0 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	080037f0 	.word	0x080037f0
 8003794:	080037f0 	.word	0x080037f0
 8003798:	080037f0 	.word	0x080037f0
 800379c:	080037f4 	.word	0x080037f4

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
