
IoT_RaulyAmira.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003748  08003748  00004748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003780  08003780  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003780  08003780  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003780  08003780  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003788  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000003c4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4b8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255f  00000000  00000000  000134f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00015a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089b  00000000  00000000  000165b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002125b  00000000  00000000  00016e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cdf  00000000  00000000  000380ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ef6  00000000  00000000  00048d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110c83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d60  00000000  00000000  00110cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00113a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003730 	.word	0x08003730

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003730 	.word	0x08003730

080001d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_CAN_Init+0x68>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_CAN_Init+0x6c>)
 80001dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_CAN_Init+0x68>)
 80001e0:	2209      	movs	r2, #9
 80001e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_CAN_Init+0x68>)
 80001e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001ec:	4b13      	ldr	r3, [pc, #76]	@ (800023c <MX_CAN_Init+0x68>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_CAN_Init+0x68>)
 80001f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80001f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_CAN_Init+0x68>)
 80001fc:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000200:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <MX_CAN_Init+0x68>)
 8000204:	2200      	movs	r2, #0
 8000206:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <MX_CAN_Init+0x68>)
 800020a:	2200      	movs	r2, #0
 800020c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <MX_CAN_Init+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_CAN_Init+0x68>)
 8000216:	2200      	movs	r2, #0
 8000218:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <MX_CAN_Init+0x68>)
 800021c:	2200      	movs	r2, #0
 800021e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <MX_CAN_Init+0x68>)
 8000222:	2200      	movs	r2, #0
 8000224:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_CAN_Init+0x68>)
 8000228:	f000 fbe4 	bl	80009f4 <HAL_CAN_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000232:	f000 f9b9 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028
 8000240:	40006400 	.word	0x40006400

08000244 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <HAL_CAN_MspInit+0x7c>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d128      	bne.n	80002b8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000266:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	4a16      	ldr	r2, [pc, #88]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 800026c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000270:	61d3      	str	r3, [r2, #28]
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800027a:	613b      	str	r3, [r7, #16]
 800027c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 8000284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <HAL_CAN_MspInit+0x80>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800029a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029c:	2302      	movs	r3, #2
 800029e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002a8:	2309      	movs	r3, #9
 80002aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4619      	mov	r1, r3
 80002b2:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <HAL_CAN_MspInit+0x84>)
 80002b4:	f000 fd80 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002b8:	bf00      	nop
 80002ba:	3728      	adds	r7, #40	@ 0x28
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40006400 	.word	0x40006400
 80002c4:	40021000 	.word	0x40021000
 80002c8:	48000400 	.word	0x48000400

080002cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08c      	sub	sp, #48	@ 0x30
 80002d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	4b47      	ldr	r3, [pc, #284]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a46      	ldr	r2, [pc, #280]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b44      	ldr	r3, [pc, #272]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002f6:	61bb      	str	r3, [r7, #24]
 80002f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fa:	4b41      	ldr	r3, [pc, #260]	@ (8000400 <MX_GPIO_Init+0x134>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a40      	ldr	r2, [pc, #256]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000300:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b3e      	ldr	r3, [pc, #248]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b3b      	ldr	r3, [pc, #236]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a3a      	ldr	r2, [pc, #232]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000326:	613b      	str	r3, [r7, #16]
 8000328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	4b35      	ldr	r3, [pc, #212]	@ (8000400 <MX_GPIO_Init+0x134>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a34      	ldr	r2, [pc, #208]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000342:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a2e      	ldr	r2, [pc, #184]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <MX_GPIO_Init+0x134>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a28      	ldr	r2, [pc, #160]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b26      	ldr	r3, [pc, #152]	@ (8000400 <MX_GPIO_Init+0x134>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000378:	4822      	ldr	r0, [pc, #136]	@ (8000404 <MX_GPIO_Init+0x138>)
 800037a:	f000 febf 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2140      	movs	r1, #64	@ 0x40
 8000382:	4821      	ldr	r0, [pc, #132]	@ (8000408 <MX_GPIO_Init+0x13c>)
 8000384:	f000 feba 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	4619      	mov	r1, r3
 800039e:	481b      	ldr	r0, [pc, #108]	@ (800040c <MX_GPIO_Init+0x140>)
 80003a0:	f000 fd0a 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80003a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80003a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 031c 	add.w	r3, r7, #28
 80003ba:	4619      	mov	r1, r3
 80003bc:	4811      	ldr	r0, [pc, #68]	@ (8000404 <MX_GPIO_Init+0x138>)
 80003be:	f000 fcfb 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003c2:	2340      	movs	r3, #64	@ 0x40
 80003c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 031c 	add.w	r3, r7, #28
 80003d6:	4619      	mov	r1, r3
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <MX_GPIO_Init+0x13c>)
 80003da:	f000 fced 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80003de:	2380      	movs	r3, #128	@ 0x80
 80003e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e2:	2300      	movs	r3, #0
 80003e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0x13c>)
 80003f2:	f000 fce1 	bl	8000db8 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3730      	adds	r7, #48	@ 0x30
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400
 8000408:	48001800 	.word	0x48001800
 800040c:	48000800 	.word	0x48000800

08000410 <SetPinOutput>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

// Custom defined functions
void SetPinOutput(uint16_t GPIO_Pin, GPIO_PinState PinState, uint16_t Delay)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
 800041a:	460b      	mov	r3, r1
 800041c:	717b      	strb	r3, [r7, #5]
 800041e:	4613      	mov	r3, r2
 8000420:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState);
 8000422:	797a      	ldrb	r2, [r7, #5]
 8000424:	88fb      	ldrh	r3, [r7, #6]
 8000426:	4619      	mov	r1, r3
 8000428:	4806      	ldr	r0, [pc, #24]	@ (8000444 <SetPinOutput+0x34>)
 800042a:	f000 fe67 	bl	80010fc <HAL_GPIO_WritePin>
	if(Delay > 0){
 800042e:	887b      	ldrh	r3, [r7, #2]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d003      	beq.n	800043c <SetPinOutput+0x2c>
		HAL_Delay(Delay);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fab8 	bl	80009ac <HAL_Delay>
	}
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	48000400 	.word	0x48000400

08000448 <ReadBtn>:

void ReadBtn()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	GPIO_PinState input = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 800044e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000452:	4816      	ldr	r0, [pc, #88]	@ (80004ac <ReadBtn+0x64>)
 8000454:	f000 fe3a 	bl	80010cc <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	71fb      	strb	r3, [r7, #7]
	if(input == GPIO_PIN_SET){
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d110      	bne.n	8000484 <ReadBtn+0x3c>
		SetPinOutput(LD1_Pin, GPIO_PIN_SET, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2101      	movs	r1, #1
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ffd2 	bl	8000410 <SetPinOutput>
		SetPinOutput(LD2_Pin, GPIO_PIN_SET, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	2101      	movs	r1, #1
 8000470:	2080      	movs	r0, #128	@ 0x80
 8000472:	f7ff ffcd 	bl	8000410 <SetPinOutput>
		SetPinOutput(LD3_Pin, GPIO_PIN_SET, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2101      	movs	r1, #1
 800047a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800047e:	f7ff ffc7 	bl	8000410 <SetPinOutput>
	} else {
		SetPinOutput(LD1_Pin, GPIO_PIN_RESET, 0);
		SetPinOutput(LD2_Pin, GPIO_PIN_RESET, 0);
		SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 0);
	}
}
 8000482:	e00f      	b.n	80004a4 <ReadBtn+0x5c>
		SetPinOutput(LD1_Pin, GPIO_PIN_RESET, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2100      	movs	r1, #0
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffc1 	bl	8000410 <SetPinOutput>
		SetPinOutput(LD2_Pin, GPIO_PIN_RESET, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	2080      	movs	r0, #128	@ 0x80
 8000494:	f7ff ffbc 	bl	8000410 <SetPinOutput>
		SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80004a0:	f7ff ffb6 	bl	8000410 <SetPinOutput>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	48000800 	.word	0x48000800

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fa14 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f80e 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f7ff ff06 	bl	80002cc <MX_GPIO_Init>
  MX_RTC_Init();
 80004c0:	f000 f878 	bl	80005b4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80004c4:	f000 f928 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80004c8:	f000 f99a 	bl	8000800 <MX_USB_PCD_Init>
  MX_CAN_Init();
 80004cc:	f7ff fe82 	bl	80001d4 <MX_CAN_Init>
	  SetPinOutput(LD1_Pin, GPIO_PIN_RESET, 500);
	  SetPinOutput(LD2_Pin, GPIO_PIN_SET, 600);
	  SetPinOutput(LD3_Pin, GPIO_PIN_SET, 700);
	  SetPinOutput(LD3_Pin, GPIO_PIN_RESET, 700);
	  */
	  ReadBtn();
 80004d0:	f7ff ffba 	bl	8000448 <ReadBtn>
 80004d4:	e7fc      	b.n	80004d0 <main+0x20>
	...

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0a6      	sub	sp, #152	@ 0x98
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80004e2:	2228      	movs	r2, #40	@ 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 f8f6 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2258      	movs	r2, #88	@ 0x58
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f8e8 	bl	80036d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000508:	2309      	movs	r3, #9
 800050a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800050c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000510:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051c:	2302      	movs	r3, #2
 800051e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800052a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800052e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800053c:	4618      	mov	r0, r3
 800053e:	f000 febd 	bl	80012bc <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000548:	f000 f82e 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800055c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000562:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000566:	2102      	movs	r1, #2
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fefb 	bl	8002364 <HAL_RCC_ClockConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000574:	f000 f818 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <SystemClock_Config+0xcc>)
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000584:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000586:	2300      	movs	r3, #0
 8000588:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f909 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000598:	f000 f806 	bl	80005a8 <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3798      	adds	r7, #152	@ 0x98
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	00030004 	.word	0x00030004

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <Error_Handler+0x8>

080005b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005ba:	4a10      	ldr	r2, [pc, #64]	@ (80005fc <MX_RTC_Init+0x48>)
 80005bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005c6:	227f      	movs	r2, #127	@ 0x7f
 80005c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005cc:	22ff      	movs	r2, #255	@ 0xff
 80005ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_RTC_Init+0x44>)
 80005e4:	f002 fafc 	bl	8002be0 <HAL_RTC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80005ee:	f7ff ffdb 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000050 	.word	0x20000050
 80005fc:	40002800 	.word	0x40002800

08000600 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <HAL_RTC_MspInit+0x44>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d111      	bne.n	8000636 <HAL_RTC_MspInit+0x36>
 8000612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000616:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	fa93 f3a3 	rbit	r3, r3
 800061e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000622:	fab3 f383 	clz	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <HAL_RTC_MspInit+0x48>)
 800062c:	4413      	add	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	461a      	mov	r2, r3
 8000632:	2301      	movs	r3, #1
 8000634:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40002800 	.word	0x40002800
 8000648:	10908100 	.word	0x10908100

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_MspInit+0x44>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_MspInit+0x44>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ea:	f000 f93f 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <SystemInit+0x20>)
 80006fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fe:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <SystemInit+0x20>)
 8000700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f002 fb46 	bl	8002dec <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f7ff ff1f 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000070 	.word	0x20000070
 8000774:	40004800 	.word	0x40004800

08000778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <HAL_UART_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d128      	bne.n	80007ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a16      	ldr	r2, [pc, #88]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 80007b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <HAL_UART_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007dc:	2307      	movs	r3, #7
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_UART_MspInit+0x84>)
 80007e8:	f000 fae6 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004800 	.word	0x40004800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000c00 	.word	0x48000c00

08000800 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <MX_USB_PCD_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 800080c:	2208      	movs	r2, #8
 800080e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 8000812:	2202      	movs	r2, #2
 8000814:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 8000818:	2202      	movs	r2, #2
 800081a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USB_PCD_Init+0x44>)
 8000830:	f000 fc7c 	bl	800112c <HAL_PCD_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800083a:	f7ff feb5 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000f8 	.word	0x200000f8
 8000848:	40005c00 	.word	0x40005c00

0800084c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_PCD_MspInit+0x38>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d10b      	bne.n	8000876 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_PCD_MspInit+0x3c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <HAL_PCD_MspInit+0x3c>)
 8000864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <HAL_PCD_MspInit+0x3c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40005c00 	.word	0x40005c00
 8000888:	40021000 	.word	0x40021000

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff ff30 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	@ (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	@ (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f002 ff15 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fdf7 	bl	80004b0 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d0:	08003788 	.word	0x08003788
  ldr r2, =_sbss
 80008d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d8:	200003d0 	.word	0x200003d0

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 fa2d 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fea6 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fa37 	bl	8000d9e <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 fa0d 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200003cc 	.word	0x200003cc

08000994 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;  
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200003cc 	.word	0x200003cc

080009ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e0ed      	b.n	8000be2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fc16 	bl	8000244 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a28:	f7ff ffb4 	bl	8000994 <HAL_GetTick>
 8000a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a2e:	e012      	b.n	8000a56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a30:	f7ff ffb0 	bl	8000994 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d90b      	bls.n	8000a56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e0c5      	b.n	8000be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0e5      	beq.n	8000a30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0202 	bic.w	r2, r2, #2
 8000a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a74:	f7ff ff8e 	bl	8000994 <HAL_GetTick>
 8000a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a7a:	e012      	b.n	8000aa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a7c:	f7ff ff8a 	bl	8000994 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b0a      	cmp	r3, #10
 8000a88:	d90b      	bls.n	8000aa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2205      	movs	r2, #5
 8000a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e09f      	b.n	8000be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1e5      	bne.n	8000a7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7e1b      	ldrb	r3, [r3, #24]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d108      	bne.n	8000aca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e007      	b.n	8000ada <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7e5b      	ldrb	r3, [r3, #25]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d108      	bne.n	8000af4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	e007      	b.n	8000b04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7e9b      	ldrb	r3, [r3, #26]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d108      	bne.n	8000b1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e007      	b.n	8000b2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0220 	bic.w	r2, r2, #32
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7edb      	ldrb	r3, [r3, #27]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d108      	bne.n	8000b48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0210 	bic.w	r2, r2, #16
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0210 	orr.w	r2, r2, #16
 8000b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7f1b      	ldrb	r3, [r3, #28]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d108      	bne.n	8000b72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f042 0208 	orr.w	r2, r2, #8
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e007      	b.n	8000b82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0208 	bic.w	r2, r2, #8
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7f5b      	ldrb	r3, [r3, #29]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d108      	bne.n	8000b9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0204 	orr.w	r2, r2, #4
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 0204 	bic.w	r2, r2, #4
 8000baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	ea42 0103 	orr.w	r1, r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e160      	b.n	800108a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8152 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80ac 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a5d      	ldr	r2, [pc, #372]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b5b      	ldr	r3, [pc, #364]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a59      	ldr	r2, [pc, #356]	@ (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f6e:	d025      	beq.n	8000fbc <HAL_GPIO_Init+0x204>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4f      	ldr	r2, [pc, #316]	@ (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01f      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d019      	beq.n	8000fb4 <HAL_GPIO_Init+0x1fc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x1f8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4c      	ldr	r2, [pc, #304]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1f4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4b      	ldr	r2, [pc, #300]	@ (80010c0 <HAL_GPIO_Init+0x308>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1f0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1ec>
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	e00c      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	e00a      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e008      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e004      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	f002 0203 	and.w	r2, r2, #3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fce:	4937      	ldr	r1, [pc, #220]	@ (80010ac <HAL_GPIO_Init+0x2f4>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001000:	4a31      	ldr	r2, [pc, #196]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001006:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001054:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f ae97 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000c00 	.word	0x48000c00
 80010bc:	48001000 	.word	0x48001000
 80010c0:	48001400 	.word	0x48001400
 80010c4:	48001800 	.word	0x48001800
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0b9      	b.n	80012b2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fb7a 	bl	800084c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fa7e 	bl	8003666 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e03e      	b.n	80011ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3311      	adds	r3, #17
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	3310      	adds	r3, #16
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	3313      	adds	r3, #19
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	3320      	adds	r3, #32
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3324      	adds	r3, #36	@ 0x24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3bb      	bcc.n	8001170 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e044      	b.n	8001288 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	3301      	adds	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3b5      	bcc.n	80011fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800129e:	f002 f9fd 	bl	800369c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f001 b83a 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 816f 	beq.w	80015d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f8:	4bb5      	ldr	r3, [pc, #724]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001304:	4bb2      	ldr	r3, [pc, #712]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d15c      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 8001310:	4baf      	ldr	r3, [pc, #700]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d155      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 800131e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001322:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8001332:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x94>
 800134a:	4ba1      	ldr	r3, [pc, #644]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e015      	b.n	800137c <HAL_RCC_OscConfig+0xc0>
 8001350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001354:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001364:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001368:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800136c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001378:	4b95      	ldr	r3, [pc, #596]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001380:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001384:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001388:	fa92 f2a2 	rbit	r2, r2
 800138c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001390:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001394:	fab2 f282 	clz	r2, r2
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f002 021f 	and.w	r2, r2, #31
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8111 	beq.w	80015d4 <HAL_RCC_OscConfig+0x318>
 80013b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8108 	bne.w	80015d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bfc6 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x12e>
 80013dc:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7b      	ldr	r2, [pc, #492]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e036      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 80013ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x158>
 80013fa:	4b75      	ldr	r3, [pc, #468]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a74      	ldr	r2, [pc, #464]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b72      	ldr	r3, [pc, #456]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e021      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001418:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x184>
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a69      	ldr	r2, [pc, #420]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a66      	ldr	r2, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001440:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a62      	ldr	r2, [pc, #392]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5f      	ldr	r2, [pc, #380]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001456:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d059      	beq.n	800151c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fa94 	bl	8000994 <HAL_GetTick>
 800146c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fa8f 	bl	8000994 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d902      	bls.n	8001488 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	f000 bf67 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800148c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800149c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_OscConfig+0x1fe>
 80014b4:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014be:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80014ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80014d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ea:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80014ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80014fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ab      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b6>
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa3a 	bl	8000994 <HAL_GetTick>
 8001520:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001526:	f7ff fa35 	bl	8000994 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d902      	bls.n	800153c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	f000 bf0d 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800153c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001540:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001550:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x2b2>
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x2de>
 800156e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001572:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001586:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800158a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800159e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80015a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80015a6:	fa92 f2a2 	rbit	r2, r2
 80015aa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80015ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	f042 0220 	orr.w	r2, r2, #32
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f002 021f 	and.w	r2, r2, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ab      	bne.n	8001526 <HAL_RCC_OscConfig+0x26a>
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 817f 	beq.w	80018ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ec:	4ba7      	ldr	r3, [pc, #668]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015f8:	4ba4      	ldr	r3, [pc, #656]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d173      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001604:	4ba1      	ldr	r3, [pc, #644]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800160c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001610:	d16c      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001624:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x386>
 800163c:	4b93      	ldr	r3, [pc, #588]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0x3ae>
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800165a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001666:	4b89      	ldr	r3, [pc, #548]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001670:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800167c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d002      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f000 be52 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	21f8      	movs	r1, #248	@ 0xf8
 80016c8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80016d0:	fa91 f1a1 	rbit	r1, r1
 80016d4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80016d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80016dc:	fab1 f181 	clz	r1, r1
 80016e0:	b2c9      	uxtb	r1, r1
 80016e2:	408b      	lsls	r3, r1
 80016e4:	4969      	ldr	r1, [pc, #420]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e0fe      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8088 	beq.w	800180e <HAL_RCC_OscConfig+0x552>
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001710:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800171e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f933 	bl	8000994 <HAL_GetTick>
 800172e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff f92e 	bl	8000994 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d902      	bls.n	800174a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	f000 be06 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800175c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x4be>
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001792:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2202      	movs	r2, #2
 80017a4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80017a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80017ac:	fa92 f2a2 	rbit	r2, r2
 80017b0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80017b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80017b8:	fab2 f282 	clz	r2, r2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f042 0220 	orr.w	r2, r2, #32
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0af      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	21f8      	movs	r1, #248	@ 0xf8
 80017ea:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80017f2:	fa91 f1a1 	rbit	r1, r1
 80017f6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80017fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80017fe:	fab1 f181 	clz	r1, r1
 8001802:	b2c9      	uxtb	r1, r1
 8001804:	408b      	lsls	r3, r1
 8001806:	4921      	ldr	r1, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e06d      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001820:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800182e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	2300      	movs	r3, #0
 8001838:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f8ab 	bl	8000994 <HAL_GetTick>
 800183e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff f8a6 	bl	8000994 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d902      	bls.n	800185a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	f000 bd7e 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5d4>
 8001884:	4b01      	ldr	r3, [pc, #4]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e016      	b.n	80018b8 <HAL_RCC_OscConfig+0x5fc>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80018b4:	4bbf      	ldr	r3, [pc, #764]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	2202      	movs	r2, #2
 80018ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80018be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80018c2:	fa92 f2a2 	rbit	r2, r2
 80018c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80018ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f002 021f 	and.w	r2, r2, #31
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ac      	bne.n	8001844 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8113 	beq.w	8001b26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d07c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x74e>
 8001910:	2301      	movs	r3, #1
 8001912:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001922:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4ba2      	ldr	r3, [pc, #648]	@ (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f82b 	bl	8000994 <HAL_GetTick>
 800193e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff f826 	bl	8000994 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d902      	bls.n	800195a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	f000 bcfe 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80019bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019c6:	2102      	movs	r1, #2
 80019c8:	6019      	str	r1, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f1a3 	rbit	r1, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019e0:	6019      	str	r1, [r3, #0]
  return result;
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d09d      	beq.n	8001944 <HAL_RCC_OscConfig+0x688>
 8001a08:	e08d      	b.n	8001b26 <HAL_RCC_OscConfig+0x86a>
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	461a      	mov	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7fe ffa2 	bl	8000994 <HAL_GetTick>
 8001a50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7fe ff9d 	bl	8000994 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d902      	bls.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f000 bc75 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	6019      	str	r1, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f1a3 	rbit	r1, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001afe:	6019      	str	r1, [r3, #0]
  return result;
 8001b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d197      	bne.n	8001a56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 81a5 	beq.w	8001e86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d121      	bne.n	8001bcc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7fe fefe 	bl	8000994 <HAL_GetTick>
 8001b98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e010      	b.n	8001bc0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7fe fef9 	bl	8000994 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d908      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e3d1      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	10908120 	.word	0x10908120
 8001bbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8001df8 <HAL_RCC_OscConfig+0xb3c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e8      	beq.n	8001b9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x92e>
 8001bdc:	4b87      	ldr	r3, [pc, #540]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a86      	ldr	r2, [pc, #536]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e035      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x958>
 8001bfa:	4b80      	ldr	r3, [pc, #512]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e020      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x982>
 8001c24:	4b75      	ldr	r3, [pc, #468]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a74      	ldr	r2, [pc, #464]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4b72      	ldr	r3, [pc, #456]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a71      	ldr	r2, [pc, #452]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8081 	beq.w	8001d6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7fe fe94 	bl	8000994 <HAL_GetTick>
 8001c6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe fe8f 	bl	8000994 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e365      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ccc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cd0:	601a      	str	r2, [r3, #0]
  return result;
 8001cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xa3a>
 8001cf0:	4b42      	ldr	r3, [pc, #264]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0xa62>
 8001cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d14:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	4b38      	ldr	r3, [pc, #224]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d26:	2102      	movs	r1, #2
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d3c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d46:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d084      	beq.n	8001c72 <HAL_RCC_OscConfig+0x9b6>
 8001d68:	e083      	b.n	8001e72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fe13 	bl	8000994 <HAL_GetTick>
 8001d6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe fe0e 	bl	8000994 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2e4      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dd2:	601a      	str	r2, [r3, #0]
  return result;
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ddc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0xb44>
 8001df2:	4b02      	ldr	r3, [pc, #8]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	e017      	b.n	8001e28 <HAL_RCC_OscConfig+0xb6c>
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e08:	2202      	movs	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4bb3      	ldr	r3, [pc, #716]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e30:	2102      	movs	r1, #2
 8001e32:	6011      	str	r1, [r2, #0]
 8001e34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	fa92 f1a2 	rbit	r1, r2
 8001e42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e46:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001e4a:	6011      	str	r1, [r2, #0]
  return result;
 8001e4c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e50:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d180      	bne.n	8001d74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a9d      	ldr	r2, [pc, #628]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 825e 	beq.w	8002354 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b96      	ldr	r3, [pc, #600]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f000 821f 	beq.w	80022e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 8170 	bne.w	8002198 <HAL_RCC_OscConfig+0xedc>
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ee6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ef2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2300      	movs	r3, #0
 8001efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe fd49 	bl	8000994 <HAL_GetTick>
 8001f02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe fd44 	bl	8000994 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e21c      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f20:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f40:	601a      	str	r2, [r3, #0]
  return result;
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0xcaa>
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcfa>
 8001f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fc8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	fa92 f1a2 	rbit	r1, r2
 8001fd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fd6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001fda:	6011      	str	r1, [r2, #0]
  return result;
 8001fdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fe0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d182      	bne.n	8001f08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	4937      	ldr	r1, [pc, #220]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002018:	4313      	orrs	r3, r2
 800201a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800201c:	4b35      	ldr	r3, [pc, #212]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	430b      	orrs	r3, r1
 800203e:	492d      	ldr	r1, [pc, #180]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800204c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002056:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002072:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800207e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fc83 	bl	8000994 <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fc7e 	bl	8000994 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e156      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80020a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe3c>
 80020ec:	4b01      	ldr	r3, [pc, #4]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e02a      	b.n	8002148 <HAL_RCC_OscConfig+0xe8c>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002118:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002122:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002126:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b86      	ldr	r3, [pc, #536]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800214c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002150:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800215a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fa92 f1a2 	rbit	r1, r2
 8002164:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002168:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800216c:	6011      	str	r1, [r2, #0]
  return result;
 800216e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002172:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f43f af7f 	beq.w	8002094 <HAL_RCC_OscConfig+0xdd8>
 8002196:	e0dd      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2300      	movs	r3, #0
 80021dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fbd9 	bl	8000994 <HAL_GetTick>
 80021e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fbd4 	bl	8000994 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ac      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80021fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002200:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002220:	601a      	str	r2, [r3, #0]
  return result;
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800222a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0xf8a>
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e027      	b.n	8002296 <HAL_RCC_OscConfig+0xfda>
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800224e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800229a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800229e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022a2:	6011      	str	r1, [r2, #0]
 80022a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fa92 f1a2 	rbit	r1, r2
 80022b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022b6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80022ba:	6011      	str	r1, [r2, #0]
  return result;
 80022bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022c0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d182      	bne.n	80021e8 <HAL_RCC_OscConfig+0xf2c>
 80022e2:	e037      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02e      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002308:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800230c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d117      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002324:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002334:	429a      	cmp	r2, r3
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09e      	sub	sp, #120	@ 0x78
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e162      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b90      	ldr	r3, [pc, #576]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b8d      	ldr	r3, [pc, #564]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	498b      	ldr	r1, [pc, #556]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b89      	ldr	r3, [pc, #548]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e14a      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b82      	ldr	r3, [pc, #520]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	497f      	ldr	r1, [pc, #508]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80dc 	beq.w	8002590 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d13c      	bne.n	800245a <HAL_RCC_ClockConfig+0xf6>
 80023e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_ClockConfig+0xa6>
 8002404:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e00f      	b.n	800242a <HAL_RCC_ClockConfig+0xc6>
 800240a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	667b      	str	r3, [r7, #100]	@ 0x64
 8002418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241c:	663b      	str	r3, [r7, #96]	@ 0x60
 800241e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002426:	4b67      	ldr	r3, [pc, #412]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800242e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002432:	fa92 f2a2 	rbit	r2, r2
 8002436:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17b      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0f3      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d13c      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
 8002462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002466:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_ClockConfig+0x128>
 8002486:	4b4f      	ldr	r3, [pc, #316]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e00f      	b.n	80024ac <HAL_RCC_ClockConfig+0x148>
 800248c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002490:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
 800249a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a8:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80024b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80024ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13a      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b2      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e00d      	b.n	8002520 <HAL_RCC_ClockConfig+0x1bc>
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	2202      	movs	r2, #2
 8002522:	61ba      	str	r2, [r7, #24]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	617a      	str	r2, [r7, #20]
  return result;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e079      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	491a      	ldr	r1, [pc, #104]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fa18 	bl	8000994 <HAL_GetTick>
 8002564:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fa14 	bl	8000994 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e061      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d214      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4906      	ldr	r1, [pc, #24]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e040      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	491a      	ldr	r1, [pc, #104]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4912      	ldr	r1, [pc, #72]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002606:	f000 f829 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002614:	22f0      	movs	r2, #240	@ 0xf0
 8002616:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	60fa      	str	r2, [r7, #12]
  return result;
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	fab2 f282 	clz	r2, r2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	40d3      	lsrs	r3, r2
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <HAL_RCC_ClockConfig+0x2ec>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_RCC_ClockConfig+0x2f0>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_RCC_ClockConfig+0x2f4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f966 	bl	800090c <HAL_InitTick>
  
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3778      	adds	r7, #120	@ 0x78
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	08003748 	.word	0x08003748
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002676:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x36>
 800268a:	e029      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800268e:	613b      	str	r3, [r7, #16]
      break;
 8002690:	e029      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b8:	4a0f      	ldr	r2, [pc, #60]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e007      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ca:	4a0b      	ldr	r2, [pc, #44]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e2:	613b      	str	r3, [r7, #16]
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	693b      	ldr	r3, [r7, #16]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08003760 	.word	0x08003760
 8002700:	08003770 	.word	0x08003770

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002722:	f7ff ffef 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002726:	4601      	mov	r1, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002730:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	fa92 f2a2 	rbit	r2, r2
 800273c:	603a      	str	r2, [r7, #0]
  return result;
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	40d3      	lsrs	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x40>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	08003758 	.word	0x08003758

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002766:	f7ff ffcd 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800276a:	4601      	mov	r1, r0
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002774:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	fa92 f2a2 	rbit	r2, r2
 8002780:	603a      	str	r2, [r7, #0]
  return result;
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	40d3      	lsrs	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	08003758 	.word	0x08003758

080027a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b092      	sub	sp, #72	@ 0x48
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80d4 	beq.w	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027de:	61d3      	str	r3, [r2, #28]
 80027e0:	4b48      	ldr	r3, [pc, #288]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b45      	ldr	r3, [pc, #276]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b42      	ldr	r3, [pc, #264]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a41      	ldr	r2, [pc, #260]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7fe f8c3 	bl	8000994 <HAL_GetTick>
 800280e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe f8bf 	bl	8000994 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b64      	cmp	r3, #100	@ 0x64
 800281e:	d901      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1d6      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002830:	4b34      	ldr	r3, [pc, #208]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002838:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800283a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8084 	beq.w	800294a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800284c:	429a      	cmp	r2, r3
 800284e:	d07c      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002850:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800285a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	461a      	mov	r2, r3
 800287a:	2301      	movs	r3, #1
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	461a      	mov	r2, r3
 800289e:	2300      	movs	r3, #0
 80028a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028a2:	4a18      	ldr	r2, [pc, #96]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe f86f 	bl	8000994 <HAL_GetTick>
 80028b6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe f86b 	bl	8000994 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e180      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028d0:	2302      	movs	r3, #2
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	61fb      	str	r3, [r7, #28]
  return result;
 80028e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d108      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028fe:	4b01      	ldr	r3, [pc, #4]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	e00d      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	10908100 	.word	0x10908100
 8002910:	2302      	movs	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	2202      	movs	r2, #2
 8002922:	613a      	str	r2, [r7, #16]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	fa92 f2a2 	rbit	r2, r2
 800292a:	60fa      	str	r2, [r7, #12]
  return result;
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0b7      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800294a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	498c      	ldr	r1, [pc, #560]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800295c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a87      	ldr	r2, [pc, #540]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297c:	4b82      	ldr	r3, [pc, #520]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	f023 0203 	bic.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	497f      	ldr	r1, [pc, #508]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800299a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4978      	ldr	r1, [pc, #480]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b8:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4970      	ldr	r1, [pc, #448]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f023 0210 	bic.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4969      	ldr	r1, [pc, #420]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029f4:	4b64      	ldr	r3, [pc, #400]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	4961      	ldr	r1, [pc, #388]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a12:	4b5d      	ldr	r3, [pc, #372]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f023 0220 	bic.w	r2, r3, #32
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	495a      	ldr	r1, [pc, #360]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a30:	4b55      	ldr	r3, [pc, #340]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	4952      	ldr	r1, [pc, #328]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	494b      	ldr	r1, [pc, #300]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a6c:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4943      	ldr	r1, [pc, #268]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	493c      	ldr	r1, [pc, #240]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002aa8:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	4934      	ldr	r1, [pc, #208]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ac6:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	492d      	ldr	r1, [pc, #180]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ae4:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af0:	4925      	ldr	r1, [pc, #148]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	491e      	ldr	r1, [pc, #120]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2c:	4916      	ldr	r1, [pc, #88]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	490f      	ldr	r1, [pc, #60]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b7a:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8e:	4913      	ldr	r1, [pc, #76]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bac:	490b      	ldr	r1, [pc, #44]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	4904      	ldr	r1, [pc, #16]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3748      	adds	r7, #72	@ 0x48
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e073      	b.n	8002cde <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7f5b      	ldrb	r3, [r3, #29]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd fcfa 	bl	8000600 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d055      	beq.n	8002ccc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22ca      	movs	r2, #202	@ 0xca
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2253      	movs	r2, #83	@ 0x53
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f87f 	bl	8002d34 <RTC_EnterInitMode>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12c      	bne.n	8002c9a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c52:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6899      	ldr	r1, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6919      	ldr	r1, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	041a      	lsls	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f886 	bl	8002da2 <RTC_ExitInitMode>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	@ 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cca:	e001      	b.n	8002cd0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <HAL_RTC_WaitForSynchro+0x48>)
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfc:	f7fd fe4a 	bl	8000994 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d02:	e009      	b.n	8002d18 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d04:	f7fd fe46 	bl	8000994 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d12:	d901      	bls.n	8002d18 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e007      	b.n	8002d28 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	0001ff5f 	.word	0x0001ff5f

08002d34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d122      	bne.n	8002d98 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d62:	f7fd fe17 	bl	8000994 <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d68:	e00c      	b.n	8002d84 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d6a:	f7fd fe13 	bl	8000994 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d78:	d904      	bls.n	8002d84 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <RTC_EnterInitMode+0x64>
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d1e8      	bne.n	8002d6a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dbc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff8b 	bl	8002ce8 <HAL_RTC_WaitForSynchro>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e040      	b.n	8002e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fcb2 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	@ 0x24
 8002e18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9fc 	bl	8003230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f825 	bl	8002e88 <UART_SetConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e01b      	b.n	8002e80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa7b 	bl	8003374 <UART_CheckIdleState>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b92      	ldr	r3, [pc, #584]	@ (80030fc <UART_SetConfig+0x274>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a80      	ldr	r2, [pc, #512]	@ (8003100 <UART_SetConfig+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d120      	bne.n	8002f46 <UART_SetConfig+0xbe>
 8002f04:	4b7f      	ldr	r3, [pc, #508]	@ (8003104 <UART_SetConfig+0x27c>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d817      	bhi.n	8002f40 <UART_SetConfig+0xb8>
 8002f10:	a201      	add	r2, pc, #4	@ (adr r2, 8002f18 <UART_SetConfig+0x90>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f35 	.word	0x08002f35
 8002f20:	08002f3b 	.word	0x08002f3b
 8002f24:	08002f2f 	.word	0x08002f2f
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e0b5      	b.n	800309a <UART_SetConfig+0x212>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e0b2      	b.n	800309a <UART_SetConfig+0x212>
 8002f34:	2304      	movs	r3, #4
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e0af      	b.n	800309a <UART_SetConfig+0x212>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e0ac      	b.n	800309a <UART_SetConfig+0x212>
 8002f40:	2310      	movs	r3, #16
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e0a9      	b.n	800309a <UART_SetConfig+0x212>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003108 <UART_SetConfig+0x280>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d124      	bne.n	8002f9a <UART_SetConfig+0x112>
 8002f50:	4b6c      	ldr	r3, [pc, #432]	@ (8003104 <UART_SetConfig+0x27c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f5c:	d011      	beq.n	8002f82 <UART_SetConfig+0xfa>
 8002f5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f62:	d817      	bhi.n	8002f94 <UART_SetConfig+0x10c>
 8002f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f68:	d011      	beq.n	8002f8e <UART_SetConfig+0x106>
 8002f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f6e:	d811      	bhi.n	8002f94 <UART_SetConfig+0x10c>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <UART_SetConfig+0xf4>
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f78:	d006      	beq.n	8002f88 <UART_SetConfig+0x100>
 8002f7a:	e00b      	b.n	8002f94 <UART_SetConfig+0x10c>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e08b      	b.n	800309a <UART_SetConfig+0x212>
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e088      	b.n	800309a <UART_SetConfig+0x212>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e085      	b.n	800309a <UART_SetConfig+0x212>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e082      	b.n	800309a <UART_SetConfig+0x212>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e07f      	b.n	800309a <UART_SetConfig+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800310c <UART_SetConfig+0x284>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d124      	bne.n	8002fee <UART_SetConfig+0x166>
 8002fa4:	4b57      	ldr	r3, [pc, #348]	@ (8003104 <UART_SetConfig+0x27c>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002fac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fb0:	d011      	beq.n	8002fd6 <UART_SetConfig+0x14e>
 8002fb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fb6:	d817      	bhi.n	8002fe8 <UART_SetConfig+0x160>
 8002fb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fbc:	d011      	beq.n	8002fe2 <UART_SetConfig+0x15a>
 8002fbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fc2:	d811      	bhi.n	8002fe8 <UART_SetConfig+0x160>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <UART_SetConfig+0x148>
 8002fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fcc:	d006      	beq.n	8002fdc <UART_SetConfig+0x154>
 8002fce:	e00b      	b.n	8002fe8 <UART_SetConfig+0x160>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e061      	b.n	800309a <UART_SetConfig+0x212>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e05e      	b.n	800309a <UART_SetConfig+0x212>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e05b      	b.n	800309a <UART_SetConfig+0x212>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e058      	b.n	800309a <UART_SetConfig+0x212>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e055      	b.n	800309a <UART_SetConfig+0x212>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <UART_SetConfig+0x288>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d124      	bne.n	8003042 <UART_SetConfig+0x1ba>
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <UART_SetConfig+0x27c>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003004:	d011      	beq.n	800302a <UART_SetConfig+0x1a2>
 8003006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800300a:	d817      	bhi.n	800303c <UART_SetConfig+0x1b4>
 800300c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003010:	d011      	beq.n	8003036 <UART_SetConfig+0x1ae>
 8003012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003016:	d811      	bhi.n	800303c <UART_SetConfig+0x1b4>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <UART_SetConfig+0x19c>
 800301c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003020:	d006      	beq.n	8003030 <UART_SetConfig+0x1a8>
 8003022:	e00b      	b.n	800303c <UART_SetConfig+0x1b4>
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e037      	b.n	800309a <UART_SetConfig+0x212>
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e034      	b.n	800309a <UART_SetConfig+0x212>
 8003030:	2304      	movs	r3, #4
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e031      	b.n	800309a <UART_SetConfig+0x212>
 8003036:	2308      	movs	r3, #8
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e02e      	b.n	800309a <UART_SetConfig+0x212>
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e02b      	b.n	800309a <UART_SetConfig+0x212>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a33      	ldr	r2, [pc, #204]	@ (8003114 <UART_SetConfig+0x28c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d124      	bne.n	8003096 <UART_SetConfig+0x20e>
 800304c:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <UART_SetConfig+0x27c>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003054:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003058:	d011      	beq.n	800307e <UART_SetConfig+0x1f6>
 800305a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800305e:	d817      	bhi.n	8003090 <UART_SetConfig+0x208>
 8003060:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003064:	d011      	beq.n	800308a <UART_SetConfig+0x202>
 8003066:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800306a:	d811      	bhi.n	8003090 <UART_SetConfig+0x208>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <UART_SetConfig+0x1f0>
 8003070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003074:	d006      	beq.n	8003084 <UART_SetConfig+0x1fc>
 8003076:	e00b      	b.n	8003090 <UART_SetConfig+0x208>
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e00d      	b.n	800309a <UART_SetConfig+0x212>
 800307e:	2302      	movs	r3, #2
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e00a      	b.n	800309a <UART_SetConfig+0x212>
 8003084:	2304      	movs	r3, #4
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e007      	b.n	800309a <UART_SetConfig+0x212>
 800308a:	2308      	movs	r3, #8
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e004      	b.n	800309a <UART_SetConfig+0x212>
 8003090:	2310      	movs	r3, #16
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e001      	b.n	800309a <UART_SetConfig+0x212>
 8003096:	2310      	movs	r3, #16
 8003098:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a2:	d16b      	bne.n	800317c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d838      	bhi.n	800311c <UART_SetConfig+0x294>
 80030aa:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <UART_SetConfig+0x228>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	0800311d 	.word	0x0800311d
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	0800311d 	.word	0x0800311d
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	080030f3 	.word	0x080030f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7ff fb22 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80030d8:	61b8      	str	r0, [r7, #24]
        break;
 80030da:	e024      	b.n	8003126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fb40 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80030e0:	61b8      	str	r0, [r7, #24]
        break;
 80030e2:	e020      	b.n	8003126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <UART_SetConfig+0x290>)
 80030e6:	61bb      	str	r3, [r7, #24]
        break;
 80030e8:	e01d      	b.n	8003126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff fab7 	bl	800265c <HAL_RCC_GetSysClockFreq>
 80030ee:	61b8      	str	r0, [r7, #24]
        break;
 80030f0:	e019      	b.n	8003126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030f6:	61bb      	str	r3, [r7, #24]
        break;
 80030f8:	e015      	b.n	8003126 <UART_SetConfig+0x29e>
 80030fa:	bf00      	nop
 80030fc:	efff69f3 	.word	0xefff69f3
 8003100:	40013800 	.word	0x40013800
 8003104:	40021000 	.word	0x40021000
 8003108:	40004400 	.word	0x40004400
 800310c:	40004800 	.word	0x40004800
 8003110:	40004c00 	.word	0x40004c00
 8003114:	40005000 	.word	0x40005000
 8003118:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77bb      	strb	r3, [r7, #30]
        break;
 8003124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d073      	beq.n	8003214 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	005a      	lsls	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d916      	bls.n	8003176 <UART_SetConfig+0x2ee>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314e:	d212      	bcs.n	8003176 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f023 030f 	bic.w	r3, r3, #15
 8003158:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b29a      	uxth	r2, r3
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	4313      	orrs	r3, r2
 800316a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	89fa      	ldrh	r2, [r7, #14]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e04e      	b.n	8003214 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	77bb      	strb	r3, [r7, #30]
 800317a:	e04b      	b.n	8003214 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317c:	7ffb      	ldrb	r3, [r7, #31]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d827      	bhi.n	80031d2 <UART_SetConfig+0x34a>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <UART_SetConfig+0x300>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031d3 	.word	0x080031d3
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031d3 	.word	0x080031d3
 80031a0:	080031d3 	.word	0x080031d3
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7ff fab6 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80031b0:	61b8      	str	r0, [r7, #24]
        break;
 80031b2:	e013      	b.n	80031dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7ff fad4 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80031b8:	61b8      	str	r0, [r7, #24]
        break;
 80031ba:	e00f      	b.n	80031dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <UART_SetConfig+0x3a4>)
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e00c      	b.n	80031dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7ff fa4b 	bl	800265c <HAL_RCC_GetSysClockFreq>
 80031c6:	61b8      	str	r0, [r7, #24]
        break;
 80031c8:	e008      	b.n	80031dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ce:	61bb      	str	r3, [r7, #24]
        break;
 80031d0:	e004      	b.n	80031dc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	77bb      	strb	r3, [r7, #30]
        break;
 80031da:	bf00      	nop
    }

    if (pclk != 0U)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085a      	lsrs	r2, r3, #1
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d909      	bls.n	8003210 <UART_SetConfig+0x388>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003202:	d205      	bcs.n	8003210 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	b29a      	uxth	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e001      	b.n	8003214 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003220:	7fbb      	ldrb	r3, [r7, #30]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	007a1200 	.word	0x007a1200

08003230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332e:	d10a      	bne.n	8003346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b098      	sub	sp, #96	@ 0x60
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003384:	f7fd fb06 	bl	8000994 <HAL_GetTick>
 8003388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d12e      	bne.n	80033f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f88c 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d021      	beq.n	80033f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e6      	bne.n	80033b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e062      	b.n	80034bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d149      	bne.n	8003498 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f856 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03c      	beq.n	8003498 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	623b      	str	r3, [r7, #32]
   return(result);
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800343c:	633b      	str	r3, [r7, #48]	@ 0x30
 800343e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003470:	61fa      	str	r2, [r7, #28]
 8003472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	617b      	str	r3, [r7, #20]
   return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e011      	b.n	80034bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3758      	adds	r7, #88	@ 0x58
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d4:	e04f      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d04b      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7fd fa59 	bl	8000994 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e04e      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d037      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b80      	cmp	r3, #128	@ 0x80
 800350a:	d034      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b40      	cmp	r3, #64	@ 0x40
 8003510:	d031      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d110      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f838 	bl	800359e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2208      	movs	r2, #8
 8003532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e029      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003550:	d111      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800355a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f81e 	bl	800359e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e00f      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0a0      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359e:	b480      	push	{r7}
 80035a0:	b095      	sub	sp, #84	@ 0x54
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e6      	bne.n	80035a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e5      	bne.n	80035d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	2b01      	cmp	r3, #1
 8003612:	d118      	bne.n	8003646 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	60bb      	str	r3, [r7, #8]
   return(result);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	647b      	str	r3, [r7, #68]	@ 0x44
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	613b      	str	r3, [r7, #16]
   return(result);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e6      	bne.n	8003614 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800365a:	bf00      	nop
 800365c:	3754      	adds	r7, #84	@ 0x54
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800366e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003672:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	b29b      	uxth	r3, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	4013      	ands	r3, r2
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <memset>:
 80036d8:	4402      	add	r2, r0
 80036da:	4603      	mov	r3, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	f803 1b01 	strb.w	r1, [r3], #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003720 <__libc_init_array+0x38>)
 80036ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003724 <__libc_init_array+0x3c>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	2600      	movs	r6, #0
 80036f4:	42a6      	cmp	r6, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003728 <__libc_init_array+0x40>)
 80036fa:	4c0c      	ldr	r4, [pc, #48]	@ (800372c <__libc_init_array+0x44>)
 80036fc:	f000 f818 	bl	8003730 <_init>
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	2600      	movs	r6, #0
 8003706:	42a6      	cmp	r6, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003710:	4798      	blx	r3
 8003712:	3601      	adds	r6, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	f855 3b04 	ldr.w	r3, [r5], #4
 800371a:	4798      	blx	r3
 800371c:	3601      	adds	r6, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	08003780 	.word	0x08003780
 8003724:	08003780 	.word	0x08003780
 8003728:	08003780 	.word	0x08003780
 800372c:	08003784 	.word	0x08003784

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
